"""
===============
gprof_nn.legacy
===============

This module provides an interface to run the legacy GPROF algorithm on
CSU systems.
"""
import logging
import subprocess
import tempfile
from pathlib import Path

import numpy as np


from gprof_nn.data.preprocessor import PreprocessorFile
from gprof_nn.data.retrieval import RetrievalFile


LOGGER = logging.getLogger(__name__)


EXECUTABLES = {
    "STANDARD": "GPROF_2020_V1",
    "SENSITIVITY": "GPROF_2020_V1_grads",
    "PROFILES": "GPROF_2020_V1_prof"

}


ANCILLARY_DATA = "/qdata1/pbrown/gpm/ancillary/"


SENSITIVITY_HEADER = \
"""
==============================================
CHANNEL SENSITIVITY FILE GENERATED BY GPROF-NN
==============================================







Channel Sensitivity for GMI
Sfccode    10V    10H    19V    19H    22V    22H    37V    37H    89V    89H   150V   150H  183/1  183/3  183/7
----------------------------------------------------------------------------------------------------------------
"""


DEFAULT_SENSITIVITIES = np.load(
    Path(__file__).parent / "files" / "gmi_era5_sensitivities.npy"
)


def write_sensitivity_file(filename,
                           nedts=None):
    """
    Write sensitivity file for GPROF algorithm.
    """
    if nedts is None:
        nedts = DEFAULT_SENSITIVITIES
    np.savetxt(filename, nedts, fmt="%6.2f", header=SENSITIVITY_HEADER)


def execute_gprof(working_directory,
                  mode,
                  profiles,
                  nedts=nedts,
                  robust=False):
    """
    Execute legacy GPROF algorithm.

    Args:
        working_directory: The folder to use to store temporary files and
            execute the retrieval.
        mode: Whether to include gradients or profiles in the
            retrieval.
        profiles: Whether profiles should be retrieved.
        nedts: Array containing sensitivities for all channels.
        robust: Whether to raise errors encountered during execution.

    Return:
        'xarray.Dataset' containing the retrieval results.
    """
    if not mode.upper() in EXECUTABLES:
        raise ValueError(
            "'mode' must be one of 'STANDARD', 'SENSITIVITY' or 'PROFILES'"
        )
    executable = EXECUTABLES[mode]
    input_file = working_directory / "input.pp"
    output_file = working_directory / "output.bin"
    log_file = working_directory / "log"

    if profiles:
        profiles = "1"
    else:
        profiles = "0"

    args = [executable,
            input_file,
            output_file,
            log_file,
            ANCILLARY_DATA,
            profiles]
    try:
        subprocess.run(args,
                       check=True,
                       capture_output=True,
                       cwd=working_directory)
    except subprocess.CalledProcessError as error:
        if robust:
            LOGGER.error(
                "Running GPROF failed with the following error: %s",
                error.stdout + error.stderr,
            )
            return None
        else:
            raise error
    data = RetrievalFile(output_file).to_xarray_dataset()
    return data


def run_gprof(input_file,
              profiles):
    """


    """
    input_data = xr.open_dataset(input_file)


def run_gprof_validation(input_file,
                         profiles):
    """
    Run GPROF on

    """

    input_data = GPROF_NN_0D_Dataset(input_file,
                                     shuffle=False,
                                     batch_size=256 * 2048)

    with TemporaryDirectory() as tmp:
        for x, y in input_data:

            preprocessor_file = tmp / "input.pp"
            result_file = tmp / "results.bin"

            subprocess.run(["GPROF_2020_V1",
                            str(preprocessor_file),
                            str(retrieval_file),
                            "log",
                            "/qdata1/pbrown/gpm/ancillary/",
                            profiles])
            print("Storing results.")
            retrieval = RetrievalFile(retrieval_file, has_profiles=profiles).to_xarray_dataset()

            x_in = input_data.to_xarray_dataset(x)
            write_preprocessor_file(x_in,
                                    preprocessor_file,
                                    template=template_file)



def run_gprof_standard():
    """
    Run GPROF on preprocessor or L1C file.
    """
    pass
